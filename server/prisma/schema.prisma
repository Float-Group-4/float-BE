// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  timeFormat String
  avatar     String?
  TeamMember TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String        @id @default(uuid())
  name        String        @unique
  teamOwner   TeamMember?   @relation("ownedBy", fields: [teamOwnerId], references: [id])
  teamOwnerId String? //do this for seeding
  TeamMember  TeamMember[]
  Setting     Setting?
  TimeOffType TimeOffType[]
  Department  Department[]
  Role        Role[]
  Tags        Tag[]
  Activity    Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id            String  @id @default(uuid())
  Team          Team    @relation(fields: [teamId], references: [id])
  teamId        String  @unique
  currency      String
  timeZone      String
  startWeek     String
  timeFormat    String
  isShowWeekend Boolean
  workDay       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeOff {
  id           String      @id @default(uuid())
  TeamMember   TeamMember  @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
  Type         TimeOffType @relation(fields: [typeId], references: [id])
  typeId       String
  startDate    DateTime
  endDate      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeOffType {
  id            String    @id @default(uuid())
  team          Team      @relation(fields: [teamId], references: [id])
  teamId        String
  name          String //@unique
  color         String
  balance       String
  days          Float
  EffectiveDate DateTime
  TimeOff       TimeOff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id     String @id @default(uuid())
  Team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  User   User   @relation(fields: [userId], references: [id])
  userId String
  name   String

  type          String
  hourlyRate    Float // ask again
  access        String
  email         String
  Activity      Activity[]
  TimeOff       TimeOff[]
  Role          Role?           @relation(fields: [roleId], references: [id])
  Department    Department?     @relation(fields: [departmentId], references: [id])
  roleId        String?
  departmentId  String?
  ProjectMember ProjectMember[]
  Allocation    Allocation[]
  TagsCreated   Tag[]           @relation("createdBy")
  OwnedTeam     Team[]          @relation("ownedBy")
  OwnedProject  Project[]

  TeamMemberTags TeamMemberTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

model Activity {
  id           String     @id @default(uuid())
  TeamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
  Team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  activity     String
  timeStamp    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  Team       Team         @relation(fields: [teamId], references: [id])
  teamId     String
  TeamMember TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          String  @id @default(uuid())
  name        String  @unique
  isSubDepart Boolean

  Team       Team         @relation(fields: [teamId], references: [id])
  teamId     String
  TeamMember TeamMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMember {
  id           String     @id @default(uuid())
  Project      Project    @relation(fields: [projectId], references: [id])
  projectId    String
  TeamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             String          @id @default(uuid())
  name           String
  projectOwner   TeamMember      @relation(fields: [projectOwnerId], references: [id])
  projectOwnerId String
  client         String
  bugdet         String
  ProjectMember  ProjectMember[]
  Task           Task[]
  ProjectTags    ProjectTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id         String       @id @default(uuid())
  Project    Project      @relation(fields: [projectId], references: [id])
  projectId  String
  name       String
  Allocation Allocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Allocation {
  id           String     @id @default(uuid())
  TeamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
  Task         Task       @relation(fields: [taskId], references: [id])
  taskId       String
  description  String
  startDate    DateTime
  endDate      DateTime
  workHours    Float
  status       Int //enum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          String     @id @default(uuid())
  Team        Team       @relation(fields: [teamId], references: [id])
  teamId      String
  name        String     @unique
  color       String
  CreatedBy   TeamMember @relation("createdBy", fields: [createdById], references: [id])
  createdById String

  TeamMemberTags TeamMemberTags[]
  ProjectTags    ProjectTags[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMemberTags {
  TeamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
  Tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        String

  @@id([teamMemberId, tagId])
}

model ProjectTags {
  Project   Project @relation(fields: [projectId], references: [id])
  projectId String
  Tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([projectId, tagId])
}
